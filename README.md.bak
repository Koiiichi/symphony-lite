# Symphony-Lite

Build web applications with natural language.

Describe what you want to build, and Symphony-Lite does the rest. AI agents generate code, test functionality, and apply improvements automatically until your vision becomes reality.

## Get Started

Clone Symphony-Lite:

```bash
git clone <repository-url>
cd symphony-lite
```

Create `.env`:
```env
OPENAI_API_KEY=your_openai_api_key_here
```

Run anything (first run automatically sets up everything):

```bash
python symphony.py run --project "projects/portfolio" --goal "Dark portfolio with contact form"
```

That's it. Symphony-Lite automatically handles virtual environments, dependencies, code generation, server management, visual testing, and iterative improvements.

## How It Works

Three specialized agents work together:

**Brain Agent**  
Generates and refines code from natural language descriptions

**Sensory Agent**  
Tests applications like a human user - scrolling, clicking, filling forms

**Runner**  
Manages servers and dependencies automatically

The system iterates until quality gates are met: visual alignment, working forms, and responsive design.

## Commands

Run the workflow:
```bash
python symphony.py run --project PATH --goal "Your description"
```

Validate project structure:
```bash
python symphony.py validate --project PATH
```

Display system information:
```bash
python symphony.py info
```

### Options

#### Required
`--project PATH` Target project folder (existing or empty)  
`--goal TEXT` What you want to build or improve  

#### Server Configuration
`--fe-port INT` Frontend port (default: 3000)  
`--be-port INT` Backend port (default: 5000)  

#### Workflow Control
`--steps INT` Test-and-fix passes (default: 3, range: 1-5)  
`--max-agent-steps INT` Brain agent iteration limit (default: 15)  
`--verbosity INT` Log detail level: 0=quiet, 1=normal, 2=verbose (default: 1)  

#### Brain Agent Configuration
`--brain-model TEXT` LLM model ID (default: gpt-4o)  
  Examples: gpt-4o, gpt-4-turbo, claude-3-opus, claude-3-sonnet  
`--temperature FLOAT` Creativity level: 0.0=focused, 1.0=creative (default: 0.7)  

#### User Experience
`--open` Auto-open browser on success  
`--no-open` Don't auto-open browser (default)

## Project Structure

### Existing Projects

Your project needs:

```
project/
├── frontend/
│   └── index.html
├── backend/
│   ├── app.py
│   └── requirements.txt
```

Symphony-Lite automatically detects your tech stack and works with it.

### Empty Projects

Start from scratch! Symphony-Lite will:
1. Detect the empty folder
2. Generate appropriate scaffolding based on your goal
3. Create frontend and backend directories
4. Set up initial files and dependencies
5. Build your application iteratively

```bash
mkdir my-new-app
python symphony.py run --project my-new-app --goal "Dashboard with user management"
```

Symphony-Lite is **project-agnostic** - it works with portfolios, dashboards, e-commerce sites, landing pages, and more.

## Quality Gates

Symphony-Lite includes automatic quality gates that must pass before completion:

| Gate | Threshold | Description |
|------|-----------|-------------|
| **Alignment** | ≥ 0.90 | Visual layout consistency and element positioning |
| **Spacing** | ≥ 0.90 | Whitespace distribution and padding uniformity |
| **Contrast** | ≥ 0.75 | Text readability and color accessibility |
| **Form Testing** | Working | Contact form successfully submits |
| **Accessibility** | ≤ 5 violations | WCAG compliance and screen reader support |
| **Playwright** | All Pass | Optional E2E test suite (if present) |

The Brain agent automatically applies targeted fixes when gates fail, ensuring production-ready applications.

See `API_CONTRACT.md` for complete quality gate details and fix policies.

## Testing

The system includes:

- Automated visual testing with GPT-4o Vision
- Form interaction validation (click, scroll, submit)
- Accessibility compliance checking (ARIA, contrast, alt text)
- Server readiness validation (URL polling)
- Screenshot artifacts saved per run

Optional Playwright integration available for advanced E2E testing scenarios.

## Examples

### Basic Usage

Portfolio website:
```bash
python symphony.py run --project "projects/portfolio" --goal "Professional dark theme with project grid"
```

E-commerce landing:
```bash
python symphony.py run --project "projects/ecommerce" --goal "Product showcase with newsletter signup"
```

Dashboard interface:
```bash
python symphony.py run --project "projects/dashboard" --goal "Clean data dashboard with responsive tables"
```

### Advanced Usage

Use Claude instead of GPT-4o:
```bash
python symphony.py run \
  --project "projects/portfolio" \
  --goal "Minimalist portfolio" \
  --brain-model "claude-3-opus" \
  --temperature 0.5
```

Quick test with browser auto-open:
```bash
python symphony.py run \
  --project "projects/portfolio" \
  --goal "Add testimonials section" \
  --steps 1 \
  --open
```

Verbose logging for debugging:
```bash
python symphony.py run \
  --project "projects/portfolio" \
  --goal "Fix mobile layout" \
  --verbosity 2
```

Start from empty folder:
```bash
mkdir my-saas-app
python symphony.py run \
  --project "my-saas-app" \
  --goal "SaaS landing page with pricing tiers" \
  --open
```

## Troubleshooting

**"can't open file symphony.py"**  
Run commands from the symphony-lite root directory, not from project subdirectories.

**"OPENAI_API_KEY not found"**  
Create a `.env` file with your OpenAI API key.

**Dependencies not installing**  
Symphony-Lite handles this automatically on first run. If issues persist, delete the `venv` folder and try again.

**"How long will it take?"**  
See QUICK_REFERENCE.md for expected runtimes by pass count. Use `--steps 1` for quick tests.

**"Seeing weird errors in logs?"**  
Internal agent debugging messages are normal. Look for status indicators: RUNNING, COMPLETE, FAILED. See QUICK_REFERENCE.md for details.

## Requirements

- Python 3.8+
- OpenAI API key
- Chrome browser

## Architecture

Symphony-Lite v2.0 features:

- **Factory Pattern**: Project-scoped agents without global state
- **Type-Safe Contracts**: Standardized `SensoryReport` format
- **Path Safety**: Prevents directory traversal attacks
- **Run Isolation**: Artifacts organized by unique run ID
- **Concurrent Execution**: Multiple runs supported simultaneously
- **Stack Detection**: Automatic introspection of existing projects

See `API_CONTRACT.md` for technical details and `MIGRATION.md` for upgrade guidance.

## Artifacts

Each run creates organized artifacts:

```
artifacts/
  run_20251013_143022/
    step_1_initial.png
    step_2_scroll.png
    step_3_submit.png
    report.json
```

Screenshots capture every interaction for debugging and verification.

## Documentation

- `API_CONTRACT.md` - Sensory-brain communication format
- `MIGRATION.md` - Upgrading from v1.x to v2.0
- `QUICK_REFERENCE.md` - Loop control and runtime guidance
- `LOOP_CONTROL.md` - Detailed agent behavior documentation
- `FIXES_APPLIED.md` - Quality improvement tracking

## Contributing

Symphony-Lite is designed for extensibility. Areas for contribution include additional testing frameworks, support for more project types, and enhanced visual analysis capabilities.

Pull requests welcome! See `MIGRATION.md` for architecture details.

## License

MIT
